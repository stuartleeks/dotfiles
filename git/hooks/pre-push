#!/bin/bash

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

branch_origin="origin/main" # TODO - look at deriving this (or at least adding a git config option to control)

# Based on the sample hook, prevent push of commits where the log message starts
# with "WIP" (work in progress).
while read local_ref local_sha remote_ref remote_sha
do
	echo "--local_ref:$local_ref"
	echo "--remote_ref:$remote_ref"
	if [ "$local_sha" = $z40 ]
	then
		# Handle delete
		:
	else
		echo "** $local_sha $remote_sha"
		if [ "$remote_sha" = $z40 ]
		then
			# New branch, examine all commits
			range="$branch_origin..$local_sha"
		else
			# Update to existing branch, examine new commits
			range="$remote_sha..$local_sha"
		fi

		# Check for WIP commit
		commit=`git rev-list -n 1 --grep '^WIP' "$range"`
		if [ -n "$commit" ]
		then
			echo >&2 "** Found WIP commit in $local_ref, not pushing **"
			git show -s $commit
			exit 1
		fi
	fi
done

sl_todo_string="SL""TODO" # build as variable to avoid VS Code highlighting literal string ;-)
sl_todos=$(git diff $branch_origin..HEAD | grep "$sl_todo_string")
if [[ -n $sl_todos ]]; then
	echo >&2 "** Found $sl_todo_string in the commit message, not pushing **"
	echo >&2 "$sl_todo_string: $sl_todos"
	exit 1
fi

exit 0

[core]
	excludesfile = /home/stuart/dotfiles/git/../.config/gitignore-global
	editor = code --wait
[alias]
	add-azdo-pr-refs = config --add remote.origin.fetch +refs/pull/*/merge:refs/remotes/origin/pr/*
	amendcommit = !git commit --amend --reuse-message \"$(git rev-parse --abbrev-ref HEAD)\"
	branches = branch -a --color -vv
	fl = log -u
	ls = log --pretty=format:%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn] --decorate
	logtree = log --graph --oneline --decorate --all
	overwrite-local-with-remote = "! f() { echo starting...;CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD); REMOTE_BRANCH=$(git for-each-ref --format=\"%(refname:short):%(upstream:short)\" refs/heads | grep $CURRENT_BRANCH: | sed -E \"s/.*:(.*)/\\\\1/\"); echo Checking out $REMOTE_BRANCH;git checkout $REMOTE_BRANCH;echo Checking out as $CURRENT_BRANCH; git checkout -B $CURRENT_BRANCH ;}; f"
	pr = "! f() { git fetch upstream pull/$1/head:pr-$1; git checkout pr-$1; }; f"
	rup = remote update --prune
	show-remote = "! f() { CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD); REMOTE_BRANCH=$(git for-each-ref --format=\"%(refname:short):%(upstream:short)\" refs/heads | grep $CURRENT_BRANCH: | sed -E \"s/.*:(.*)/\\\\1/\"); echo Remote tracking branch for $CURRENT_BRANCH is $REMOTE_BRANCH; }; f"
	sv = status -vv
	undo = reset HEAD~1 --mixed
	wip = !git add -A && git commit -qm WIP
	xwipe = !git add -A && git commit -qm \"WIPE SAVEPOINT\" && git reset HEAD~1 --hard
[merge]
	conflictstyle = diff3
[interactive]
	diffFilter = diff-so-fancy --patch
